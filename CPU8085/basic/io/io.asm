PAGE

STACK	EQU	$FFFF			SYSTEM STACK

TIMER	EQU	$40			TIMER PORT BASE
T_C0	EQU	TIMER+0			COUNTER 0
T_C1	EQU	TIMER+1			COUNTER 1
T_C2	EQU	TIMER+2			COUNTER 2
T_CWR	EQU	TIMER+3			CONTROL WORD REGISTER

UART	EQU	$60			UART PORT BASE
U_RBR	EQU	UART+0			RECEIVER BUFFER REGISTER (READ ONLY)
U_THR	EQU	UART+0			TRANSMITTER HOLDING REGISTER (WRITE ONLY)
U_IER	EQU	UART+1			INTERRUPT ENABLE REGISTER
U_IIR	EQU	UART+2			INTERRUPT IDENTIFICATION REGISTER (READ ONLY)
U_LCR	EQU	UART+3			LINE CONTROL REGISTER
U_MCR	EQU	UART+4			MODEM CONTROL REGISTER
U_LSR	EQU	UART+5			LINE STATUS REGISTER
U_MSR	EQU	UART+6			MODEM STATUS REGISTER
U_SCR	EQU	UART+7			SCRATCH REGISTER
U_DLL	EQU	UART+0			DIVISOR LATCH (LSB)
U_DLM	EQU 	UART+1			DIVISOR LATCH (MSB)

MISC	EQU	$80			MISC GATES

* RAM VARIABLES
RAMBASE	EQU	$8000			RAM BASE

TICNT	EQU	RAMBASE			(2) TIMER COUNT


*********************************************************
* MAIN PROGRAM
*********************************************************
	ORG $00
RST0
	DI
	LXI	SP,STACK		INITALIZE STACK
	JMP 	START
	
*********************************************************
	ORG $34
RST65
	DI
	JMP	INTUART

*********************************************************
	ORG $3C
RST75
	DI
	JMP	INTTI0
	

START
	CALL	INITMISC		INITIALIZE MISC OUTPUTS
	CALL	INITTIMER		INITIALIZE TIMER
	CALL	INITUART		INITIALIZE UART	

	MVI	A,8		SET INTERRUPT MASK
	SIM
	EI			ENABLE INTERRUPTS

	CALL	BEEP		MAKE SOME NOISE!


LOOP	JMP	LOOP


*********************************************************
* INITUART:  INITIALIZES UART
INITUART
	PUSH	PSW
	
	MVI	A,$A0		SET DLA MODE
	OUT	U_LCR		
	
	MVI	A,$30		BAUD RATE SETUP
	OUT	U_DLL		2400 BAUDS
	MVI	A,$00		
	OUT	U_DLM
	
	MVI	A,$03		LCR SETUP
	OUT	U_LCR		8 DATA, 1 STOP, NO PARITY, DLA_OFF
	
	MVI	A,$01		INTERRUPT ENABLE REGISTER
	OUT	U_IER		ENABLE RECEIVED DATA AVAILABLE INTERRUPT
	
	POP	PSW
	RET

*********************************************************
* INTUART:  INTERRUPT HANDLER FOR UART
INTUART
	PUSH	PSW
	
	IN	U_RBR		GET THE BYTE
	OUT	U_THR		SEND IT BACK
	
	POP	PSW
	EI
	RET

*********************************************************
* TIMER ROUTINES
*********************************************************

*********************************************************
* INITTIMER:  INITIALIZES TIMERS
INITTIMER
	LXI	H,$0000		CLEAR H-L
	SHLD	TICNT		H-L IN WORD AT 'TICNT'

* SET COUNTER 0	

	MVI	A,$36		COUNTER 0, LSB+MSB, MODE 2, NOBCD
	OUT	T_CWR
	
* SOURCE:14400HZ,  DEST:10HZ, DIVIDE BY 1440 ($05A0)

	MVI	A,$A0		LSB
	OUT	T_C0
	
	MVI	A,$05		MSB
	OUT	T_C0
	
* ENABLE OUTPUT
	IN	MISC
	ORI	1		SET BIT 0
	OUT 	MISC	
	
* SET COUNTER 1

* SET COUNTER 2

	MVI	A,$B6		COUNTER 2, LSB+MSB, MODE 3, NOBCD
	OUT	T_CWR
	

	RET

*********************************************************
* INTTI0:  INTERRUPT HANDLER FOR TIMER 0. INCREMENTS TICNT
INTTI0
	PUSH	H
	
	LHLD	TICNT
	INX	H
	SHLD	TICNT
	POP	H
	
	EI
	RET


*********************************************************
* BEEP:  MAKES A 440HZ BEEP FOR 1/2 SECOND
BEEP
	PUSH 	PSW
	
	MVI	A,45		LA4 440HZ
	CALL	SOUNDON
	MVI	A,5		
	CALL 	DELAY		WAIT 5 * 100 MS
	CALL	SOUNDOFF
	
	POP	PSW
	RET

*********************************************************
* SOUNDON:  PROGRAMS COUNTER 0 AND ENABLES SOUND OUTPUT
SOUNDON
	PUSH 	PSW
	PUSH	B
	
	CALL	SOUNDOFF		TURNS OFF SOUND BEFORE REPROGRAMMING
	
	RLC				OFFSET *= 2 (TABLE CONTAINS WORDS)

	MVI	B,0
	MOV	C,A			OFFSET IN B-C
	
	LXI	H,NOTES			TABLE BASE IN H-L
	DAD	B			ADD OFFSET TO H-L
	
	MOV	A,M			BYTE AT H-L IN A (NOTE LSB)
	
	OUT	T_C2			DIVIDER LSB TO COUNTER
	
	INX	H			H-L POINTS TO NEXT BYTE
	MOV	A,M			BYTE AD H-L IN A (NOTE MSB)
	
	OUT	T_C2			DIVIDER MSB TO COUNTER	
	
	IN	MISC			INPUT MISC REGISTER
	ORI	$04			TURNS ON BIT 2
	OUT	MISC			OUTPUT MISC REGISTER
	
	POP	B
	POP	PSW	
	RET

*********************************************************
* SOUNDOFF:  DISABLES SOUND OUTPUT
SOUNDOFF
	PUSH 	PSW
	
	IN	MISC			INPUT MISC REGISTER
	ANI	$FB			TURNS OFF BIT 2
	OUT	MISC			OUTPUT MISC REGISTER
	
	POP	PSW
	RET


*********************************************************
* MISC ROUTINES
*********************************************************

INITMISC
	PUSH	PSW
	MVI	A,0			ALL OUTPUTS LOW
	OUT	MISC
	POP	PSW
	RET

*********************************************************
* DELAY, WAITS ACC * 100MS
DELAY	PUSH 	PSW
	PUSH 	H
	PUSH	D

	LHLD	TICNT		LOAD CURRENT COUNT IN H-L

	MOV	E,A		COUNT IN D-E
	MVI	D,0
	
	DAD	D		ADD TO H-L
	
	XCHG			EXCHANGE D&E, H&L, TARGET NOW IN D-E
	
DLOOP	LHLD	TICNT		LOAD CURRENT COUNT IN H-L

	MOV	A,H		MSB IN A
	XRA	D		COMPARE WITH MSB OF TARGET
	JNZ	DLOOP		DIFFERENT -> LOOP
	
	MOV	A,L		LSB IN A
	XRA	E		COMPARE WITH LSB OF TARGET
	JNZ	DLOOP		DIFFERENT -> LOOP	
	
* WE ARE DONE!
	
	POP	D
	POP	H
	POP 	PSW
RET


NOTES	DW	$DC29,$CFCE,$C424,$B922,$AEBE,$A4EF,$9BAE,$92F1,$8AB1,$82E9,$7B90,$74A0
	DW	$6E15,$67E7,$6212,$5C91,$575F,$5278,$4DD7,$4978,$4559,$4174,$3DC8,$3A50
	DW	$370A,$33FA,$3109,$2E49,$2BB0,$293C,$26EB,$24BC,$22AC,$20BA,$1EE4,$1D28
	DW	$1B85,$19FA,$1885,$1724,$15D8,$149E,$1376,$125E,$1156,$105D,$0F72,$0E94
	DW	$0DC3,$0CFD,$0C42,$0B92,$0AEC,$0A4F,$09BB,$092F,$08AB,$082F,$07B9,$074A
	DW	$06E1,$067E,$0621,$05C9,$0576,$0527,$04DD,$0498,$0456,$0417,$03DC,$03A5
	DW	$0371,$033F,$0311,$02E5,$02BB,$0294,$026F,$024C,$022B,$020C,$01EE,$01D3

