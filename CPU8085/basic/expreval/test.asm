.module 	exprevaltest
.title 		Tests expreval Module

.include	'expreval.def'
.include	'..\tokenize\tokenize.def'

STACK	==	0xFFFF			;SYSTEM STACK

.area	BOOT	(ABS)

.org 	0x0000
	
RST0:
	DI
	LXI	SP,STACK		;INITALIZE STACK
	JMP 	START


;*********************************************************
;* MAIN PROGRAM
;*********************************************************
.area 	_CODE

START:

	MVI	A,8			;SET INTERRUPT MASK
	SIM
	EI				;ENABLE INTERRUPTS

	CALL	EXP_INIT

	JMP	TEST_EXPR

	LXI	H,TESTSTR100
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR100
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL

	LXI	H,TESTSTR101
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR101
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL


	LXI	H,TESTSTR102
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR102
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL

TEST_EXPR:
	LXI	H,TESTSTR103
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR103
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL
	

	LXI	H,TESTSTR104
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR104
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL
	

	LXI	H,TESTSTR105
	CALL	TOK_TOKENIZE1
	
	LXI	D,TESTSTR105
	LXI	H,OUTSTR
	CALL	TOK_TOKENIZE2
	
	LXI	H,OUTSTR
	CALL	EXP_EXPREVAL		


LOOP:
	JMP	LOOP



.area	DATA	(REL,CON)
TESTSTR100:	.asciz	'2+X'
TESTSTR101:	.asciz	'"AB"+"BCD"'
TESTSTR102:	.asciz	'(2+A)*5'

TESTSTR103:	.asciz	'SGN(1)'
TESTSTR104:	.asciz	'LEFT$(1,2)'
TESTSTR105:	.asciz	'MID$(1,2,3)'



OUTSTR:		.ds 128

